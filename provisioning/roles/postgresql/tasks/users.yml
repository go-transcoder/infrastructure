---

- name: Ensure PostgreSQL users are present.
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    login_host: "{{ db_host }}"
    login_user: "{{ main_db_user }}"
    login_password: "{{ main_db_pass }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    db: "{{ main_db_name }}"
#    role_attr_flags: "CREATEDB"
  with_items: "{{ postgresql_users }}"
  no_log: "{{ postgres_users_no_log }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  become: true
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ venv_executable }}"
  environment:
    PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256') | ternary('-c password_encryption=scram-sha-256', '') }}"



- name: Grant privileges
  postgresql_privs:
    database: "{{ item.main_db }}"
    role: "{{ item.user }}"
    objs: "{{ item.objs }}"
    privs: ALL
    login_host: "{{ db_host }}"
    login_user: "{{ main_db_user }}"
    login_password: "{{ main_db_pass }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
  with_items: "{{ postgresql_privs }}"
  no_log: "{{ postgres_users_no_log }}"
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ venv_executable }}"

